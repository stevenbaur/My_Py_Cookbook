readme keyboard inputs in kivy howto

Die Klasse muss die Tastatur anfordern. Anschließend erfolgt ein Bind für das Drücken der Taste bzw. das Loslassen.
Die gedrückten Tasten werden in einem Set gespeichert (damit z.B. diagonale Bewegungen bzw. gleichzeitiges Tastendrücken
möglich wird). Die entsprechende Funktione, die dieses Set weiter verarbeitet wird regelmäßig aufgerufen (clock schedule).
In diesem Beispiel: Die Bewegungsgeschwindigkeit wird dabei das die Framezeit dt gebunden, damit die Bewegung mit gleicher
Geschwindigkeit verläuft, unabhängig von der Rechnergeschwindigkeit etc.

siehe:
class wdgt(Widget):     Die Hauptklasse wird erzeugt, welche die Tastatur anfragt
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._keyboard = Window.request_keyboard(self._on_keyboard_closed, self)    Anfrage an Window (KIVY) für die Tastatur, mit
                                der Funktion, die bei Schließen der Tastatur aufgerufen wird (für das unbind)
        self._keyboard.bind(on_key_down=self._on_key_down)                          Bind für das Ereignis des Tastendruckes
        self._keyboard.bind(on_key_up=self._on_key_up)                              Bind für das Loslassen der Taste

        with self.canvas:                                                           Hierfür unerheblich, irgendetwas muss die Tastatur
            self.player = Rectangle(source='player.png', pos=(0,0), size=(100,100)) ja nutzen (Player), dies sind Kivy-Canvas Anweisungen
                                                                                    zum Zeichnen des Players auf dem Canvas.

        self.keysPressed = set()    Definieren des leeren Sets, das die gedrückten Tasten zum Zeitpunkt x enthält. (Anfänglich leer)

        Clock.schedule_interval(self.move_step, 0)  Regelmäßiges Aufrufen der Bewegungsaktion bzw. der Funktion, die letzlich mit dem
                                                    Tastendruck etwas anfangen soll

    def _on_keyboard_closed(self):                  Funktion die beim schließen des Keyboards durchgeführt wird (siehe oben)
        self._keyboard.unbind(on_key_down=self._on_key_down)    Unbind für das Ereignis des Tastendruckes
        self._keyboard.unbind(on_key_up=self._on_key_up)        Unbind für das Loslassen der Taste
        self._keyboard = None                                   Keyboard auf None setzen/freigeben

    def _on_key_up(self, keyboard, keycode):        Funktion für das Loslassen der Taste
        if keycode[1] in self.keysPressed:          Befindet sich die Taste mit dem entsprechenden Keycode im Set, Dann:
            self.keysPressed.remove(keycode[1])     Entferne die Taste aus dem Set (damit diese nicht länger als gedrückt gilt)

    def _on_key_down(self, keyboard, keycode, text, modifiers): Funktion für das Drücken der Taste
        self.keysPressed.add(keycode[1])                        Füge die gedrückte Taste dem Set hinzu, damit diese als gedrückt gilt

    def move_step(self,dt):                         Dies ist die Funktion, die mit den gedrückten Tasten etwas anfangen soll (Hier:
                                                    Spieler bewegen
        currentx = self.player.pos[0]               Extrahieren der X-Koordinate des Spielers (die aktuelle)
        currenty = self.player.pos[1]               Extrahieren der Y-Koordinate des Spielers (die aktuelle)

        step_size = 200 * dt                        Bewegungsgeschwindigkeit, abhängig von der "Framezeit" dt. Damit bewegt sich
                                                    der Spieler flüssig und mit konstanter Geschwindigkeit auf allen Rechnern.


        if 'up' in self.keysPressed:                Einfache Logik zur Bewegung: Ist eine Taste im Set enthalten, wenn die Funktion
            currenty += step_size                   aufgerufen wird (was ja alle dt (Zeit) geschieht), wird das entsprechende
        if 'down' in self.keysPressed:              Ereignis ausgeführt. Hier: Die X- bzw. Y-Koordinate des Spielers wird verändert.
            currenty -= step_size
        if 'right' in self.keysPressed:
            currentx += step_size
        if 'left' in self.keysPressed:
            currentx -= step_size

        self.player.pos = (currentx, currenty)      Die Spielerposition wird auf die neuen Koordinaten aktualisiert.
